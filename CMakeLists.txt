cmake_minimum_required(VERSION 3.28)

set(NON_EMPTY_COUNT 0)
option(RK3588 "Enable RK3588" OFF)
if (RK3588)
    message(STATUS, "RK3588 is enabled")
    if (NOT CMAKE_TOOLCHAIN_FILE)
        set(CMAKE_TOOLCHAIN_FILE "/opt/kaylor/data/work/rockchip/rk3588_dev_rootfs/toolchain-aarch64.cmake")
    endif ()
    message(STATUS, "CMAKE_TOOLCHAIN_FILE is ${CMAKE_TOOLCHAIN_FILE}")
    add_definitions(-DRK3588=1)
    set(AI_INSTANCE "ai_instance_rk3588")
    math(EXPR NON_EMPTY_COUNT "${NON_EMPTY_COUNT} +1")
endif ()

option(TRT "Enable TRT" ON)
if (TRT)
    message(STATUS, "TRT is enabled")
    add_definitions(-DTRT=1)
    set(AI_INSTANCE "ai_instance_tensorrt")
    math(EXPR NON_EMPTY_COUNT "${NON_EMPTY_COUNT} +1")
endif ()
message(STATUS, "NON_EMPTY_COUNT is ${NON_EMPTY_COUNT}")
if (NOT ${NON_EMPTY_COUNT} EQUAL 1)
    message(FATAL_ERROR, "Only One of RK3588 or TRT can be non-empty")
    return()
endif ()

project(depth_anything_demo)

set(CMAKE_CXX_STANDARD 17)
find_package(${AI_INSTANCE} REQUIRED)
find_package(kaylordut REQUIRED)
find_package(yaml-cpp REQUIRED)
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
set(LINKS ${${AI_INSTANCE}_LIBS} ${OpenCV_LIBS} ${kaylordut_LIBS} ${YAML_CPP_LIBRARIES})
message(STATUS, "LINKS is ${LINKS}")

add_executable(depth_anything_demo main.cpp depth_anything/depth_imageprocess.cpp)
target_link_libraries(depth_anything_demo ${LINKS})
#target_link_libraries(depth_anything_demo ${${AI_INTANCE}_LIBS} ${kaylordut_LIBS} ${YAML_CPP_LIBRARIES} ${OpenCV_LIBS})
